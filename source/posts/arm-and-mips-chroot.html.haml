- content_for :title, "arm and mips chroot"
- content_for :description, "How to create full featured arm and mips chroot environment in gentoo."
- content_for :keywords, "arm, mips, gcc, gdb, toolchain, stage3, qemu, cflags, chost"
- content_for :script do
  = javascript_include_tag "//connect.facebook.net/en_US/all.js#xfbml=1&appId=259424114218414"
- content_for :content do
  %ul.content
    %li
      .label
        %h1
          How to create full featured arm and mips chroot environment in gentoo
        %p.date
          18.03.14
      .topic
        %p
          :markdown
            **Crossdev** in gentoo is a utility, that can create toolchain for **cross compilation**. But cross compilation has disadvantages:
        %ol
          %li You can't run compiled software if host processor does not support target arch.
          %li You should support toolchain build configuration for your program and for dependecies of your program, if it does not exist or broken.
        %p
          :markdown
            It is possible to avoid cross compilation by using chroot environment and emulator for target arch.
            For example [qemu emulator](http://wiki.qemu.org/Main_Page) has great support of **arm** and **mips** arch.
        %br
        
        %p
          First of all you should create usual crossdev environment for arm (mips)
        = preserve do
          - code("shell") do
            :plain
              sudo emerge -v sys-devel/crossdev
              sudo crossdev -t arm-hardfloat-linux-gnueabi --g 4.8.2-r1 --l 2.19 --k 3.13 --b 2.23.2
              sudo crossdev -t mips-unknown-linux-gnueabi  --g 4.8.2-r1 --l 2.19 --k 3.13 --b 2.23.2
              
              sudo rm /usr/arm-hardfloat-linux-gnueabi/etc/portage/make.profile
              sudo rm /usr/mips-unknown-linux-gnueabi/etc/portage/make.profile
              sudo ln -s /usr/portage/profiles/default/linux/arm/13.0/  /usr/arm-hardfloat-linux-gnueabi/etc/portage/make.profile
              sudo ln -s /usr/portage/profiles/default/linux/mips/13.0/ /usr/mips-unknown-linux-gnueabi/etc/portage/make.profile
        
        %p
          :markdown
            Set the following configuration lines to **/usr/arm-hardfloat-linux-gnueabi/etc/portage/make.conf** and **/usr/mips-unknown-linux-gnueabi/etc/portage/make.conf**
        
        = preserve do
          - code("shell") do
            :plain
              USE="${ARCH} minimal -pam -nls"
              CFLAGS="-O2 -pipe"
              MAKEOPTS="-j9"
              FEATURES="-collision-protect -protect-owned sandbox noman nodoc noinfo"
              PYTHON_TARGETS="python3_3"
              PYTHON_SINGLE_TARGET="python3_3"
        
        %p
          Than you need to build minimal toolchain
        
        = preserve do
          - code("shell") do
            :plain
              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.mask
              echo '>=sys-devel/binutils-2.24' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.mask/sys-devel > /dev/null
              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.unmask
              echo '=sys-devel/gcc-4.8.2-r1' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.unmask/sys-devel > /dev/null
              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.keywords
              echo '=sys-devel/gcc-4.8.2-r1 **' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.keywords/sys-libs > /dev/null
              echo '=sys-libs/glibc-2.19 **' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/package.keywords/sys-libs > /dev/null
              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/env/dev-lang
              echo 'export ac_cv_file__dev_ptmx=no' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null
              echo 'export ac_cv_file__dev_ptc=no' | sudo tee -a /usr/arm-hardfloat-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null
              
              sudo arm-hardfloat-linux-gnueabi-emerge -v1 sys-kernel/linux-headers sys-devel/binutils bash portage findutils wget app-arch/tar sys-devel/make grep patch
              
              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.8.2-r1
              sudo wget "https://www.puchuu.com/patches/sys-devel/gcc-4.8.2-r1/target_header_dir.patch" -O /usr/arm-hardfloat-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.8.2-r1/target_header_dir.patch
              
              sudo arm-hardfloat-linux-gnueabi-emerge -v1 sys-devel/gcc
              
              
              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/package.mask
              echo '>=sys-devel/binutils-2.24' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/package.mask/sys-devel > /dev/null
              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/package.unmask
              echo '=sys-devel/gcc-4.8.2-r1' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/package.unmask/sys-devel > /dev/null
              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/package.keywords
              echo '=sys-devel/gcc-4.8.2-r1 **' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/package.keywords/sys-libs > /dev/null
              echo '=sys-libs/glibc-2.19 **' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/package.keywords/sys-libs > /dev/null
              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/env/dev-lang
              echo 'export ac_cv_file__dev_ptmx=no' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null
              echo 'export ac_cv_file__dev_ptc=no' | sudo tee -a /usr/mips-unknown-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null

              sudo mips-unknown-linux-gnueabi-emerge -v1 sys-kernel/linux-headers sys-devel/binutils bash portage findutils wget app-arch/tar sys-devel/make grep patch

              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.8.2-r1
              sudo wget "https://www.puchuu.com/patches/sys-devel/gcc-4.8.2-r1/target_header_dir.patch" -O /usr/mips-unknown-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.8.2-r1/target_header_dir.patch

              sudo mips-unknown-linux-gnueabi-emerge -v1 sys-devel/gcc
        
        %p
          :markdown
            You should make the gawk patchable, edit **/usr/portage/sys-apps/gawk/gawk-4.1.0.ebuild**.
        
        = preserve do
          - code("shell") do
            :plain
              src_prepare() {
                ...
                epatch_user
              }
        %p
          Than emerge it.
        
        = preserve do
          - code("shell") do
            :plain
              sudo ebuild /usr/portage/sys-apps/gawk/gawk-4.1.0.ebuild manifest

              sudo mkdir -p /usr/arm-hardfloat-linux-gnueabi/etc/portage/patches/sys-apps/gawk-4.1.0
              sudo wget "https://www.puchuu.com/patches/sys-apps/gawk-4.1.0/no-ext-and-tests.patch" -O /usr/arm-hardfloat-linux-gnueabi/etc/portage/patches/sys-apps/gawk-4.1.0/no-ext-and-tests.patch
              sudo arm-hardfloat-linux-gnueabi-emerge -v1 gawk

              sudo mkdir -p /usr/mips-unknown-linux-gnueabi/etc/portage/patches/sys-apps/gawk-4.1.0
              sudo wget "https://www.puchuu.com/patches/sys-apps/gawk-4.1.0/no-ext-and-tests.patch" -O /usr/mips-unknown-linux-gnueabi/etc/portage/patches/sys-apps/gawk-4.1.0/no-ext-and-tests.patch
              sudo mips-unknown-linux-gnueabi-emerge -v1 gawk
        
        %p
          You can copy toolchain to your workspace now and start prepairing chroot.
        
        = preserve do
          - code("shell") do
            :plain
              mkdir -p ~/workspace
              sudo cp -R /usr/arm-hardfloat-linux-gnueabi ~/workspace/
              sudo cp -R /usr/mips-unknown-linux-gnueabi ~/workspace/              
        
        %br
        %p
          :markdown
            It is time to install qemu.
            You need a binfmt wrapper, which [dont exist](https://lists.gnu.org/archive/html/qemu-devel/2011-09/msg03841.html) in qemu upstream.
            So I've prepaired a simple patch.
        = preserve do
          - code("shell") do
            :plain
              sudo mkdir -p /etc/portage/env/
              echo 'QEMU_USER_TARGETS="arm mips"' | sudo tee /etc/portage/env/qemu.conf > /dev/null
              
              sudo mkdir -p /etc/portage/package.env/
              echo 'app-emulation/qemu-user qemu.conf' | sudo tee -a /etc/portage/package.env/app-emulation > /dev/null
              
              sudo mkdir -p /etc/portage/patches/app-emulation/qemu-user-9999/
              sudo wget "https://www.puchuu.com/patches/app-emulation/qemu-user-9999/binfmt-wrapper.patch" -O /etc/portage/patches/app-emulation/qemu-user-9999/binfmt-wrapper.patch
              
              sudo emerge -v =app-emulation/qemu-user-9999
        
        %p
          :markdown
            Now you can register **qemu-static-arm-binfmt** and **qemu-static-mips-binfmt** in kernel.
        = preserve do
          - code("shell") do
            :plain
              sudo rc-service qemu-binfmt start
        
        %p
          Copy qemu emulator to chroot.
        
        = preserve do
          - code("shell") do
            :plain
              sudo cp /usr/bin/qemu-static-arm-binfmt ~/workspace/arm-hardfloat-linux-gnueabi/usr/bin/
              sudo cp /usr/bin/qemu-static-arm        ~/workspace/arm-hardfloat-linux-gnueabi/usr/bin/
              
              sudo cp /usr/bin/qemu-static-mips-binfmt ~/workspace/mips-unknown-linux-gnueabi/usr/bin/
              sudo cp /usr/bin/qemu-static-mips        ~/workspace/mips-unknown-linux-gnueabi/usr/bin/
        
        %p
          Clean chroot environment.
        
        = preserve do
          - code("shell") do
            :plain
              sudo rm -r ~/workspace/arm-hardfloat-linux-gnueabi/tmp/portage/*
              sudo rm ~/workspace/arm-hardfloat-linux-gnueabi/etc/portage/make.profile
              sudo rm -r ~/workspace/arm-hardfloat-linux-gnueabi/etc/portage/env
              sudo rm -r ~/workspace/arm-hardfloat-linux-gnueabi/etc/portage/patches
              
              sudo mkdir -p ~/workspace/arm-hardfloat-linux-gnueabi/proc
              sudo mkdir -p ~/workspace/arm-hardfloat-linux-gnueabi/dev
              sudo mkdir -p ~/workspace/arm-hardfloat-linux-gnueabi/sys
              sudo mkdir -p ~/workspace/arm-hardfloat-linux-gnueabi/root
              sudo mkdir -p ~/workspace/arm-hardfloat-linux-gnueabi/usr/portage/
              
              echo 'root:x:0:0:root:/root:/bin/bash
              portage:x:250:250:portage:/var/tmp/portage:/bin/false' | sudo tee -a ~/workspace/arm-hardfloat-linux-gnueabi/etc/passwd > /dev/null
              echo 'root:x:0:root
              portage::250:portage' | sudo tee -a ~/workspace/arm-hardfloat-linux-gnueabi/etc/group > /dev/null
              
              echo 'LANG="en_US.UTF-8"
              LC_COLLATE="C"' | sudo tee -a ~/workspace/arm-hardfloat-linux-gnueabi/etc/env.d/02locale > /dev/null
              
              echo 'en_US.UTF-8 UTF-8' | sudo tee -a ~/workspace/arm-hardfloat-linux-gnueabi/etc/locale.gen > /dev/null


              sudo rm -r ~/workspace/mips-unknown-linux-gnueabi/tmp/portage/*
              sudo rm ~/workspace/mips-unknown-linux-gnueabi/etc/portage/make.profile
              sudo rm -r ~/workspace/mips-unknown-linux-gnueabi/etc/portage/env
              sudo rm -r ~/workspace/mips-unknown-linux-gnueabi/etc/portage/patches

              sudo mkdir -p ~/workspace/mips-unknown-linux-gnueabi/proc
              sudo mkdir -p ~/workspace/mips-unknown-linux-gnueabi/dev
              sudo mkdir -p ~/workspace/mips-unknown-linux-gnueabi/sys
              sudo mkdir -p ~/workspace/mips-unknown-linux-gnueabi/root
              sudo mkdir -p ~/workspace/mips-unknown-linux-gnueabi/usr/portage/

              echo 'root:x:0:0:root:/root:/bin/bash
              portage:x:250:250:portage:/var/tmp/portage:/bin/false' | sudo tee -a ~/workspace/mips-unknown-linux-gnueabi/etc/passwd > /dev/null
              echo 'root:x:0:root
              portage::250:portage' | sudo tee -a ~/workspace/mips-unknown-linux-gnueabi/etc/group > /dev/null

              echo 'LANG="en_US.UTF-8"
              LC_COLLATE="C"' | sudo tee -a ~/workspace/mips-unknown-linux-gnueabi/etc/env.d/02locale > /dev/null

              echo 'en_US.UTF-8 UTF-8' | sudo tee -a ~/workspace/mips-unknown-linux-gnueabi/etc/locale.gen > /dev/null

        %p
          :markdown
            Set **~/workspace/arm-hardfloat-linux-gnueabi/etc/portage/make.conf** to something like.
        
        = preserve do
          - code("shell") do
            :plain
              SYNC="rsync://mirror.yandex.ru/gentoo-portage/"
              GENTOO_MIRRORS="http://mirror.yandex.ru/gentoo-distfiles/"

              CHOST="arm-hardfloat-linux-gnueabi"
              CFLAGS="-O2 -pipe"
              CXXFLAGS="${CFLAGS}"
              MAKEOPTS="-j9"

              FEATURES=""
              ACCEPT_KEYWORDS="~arm"
              LINGUAS="en"
              
              USE="-pam -nls"

              PORTDIR="/usr/portage"
              PORTDIR_OVERLAY="/usr/portage"

              PYTHON_TARGETS="python3_3"
              PYTHON_SINGLE_TARGET="python3_3"
        
        %p
          :markdown
            Set **~/workspace/mips-unknown-linux-gnueabi/etc/portage/make.conf** to something like.

        = preserve do
          - code("shell") do
            :plain
              SYNC="rsync://mirror.yandex.ru/gentoo-portage/"
              GENTOO_MIRRORS="http://mirror.yandex.ru/gentoo-distfiles/"

              CHOST="mips-unknown-linux-gnueabi"
              CFLAGS="-O2 -pipe"
              CXXFLAGS="${CFLAGS}"
              MAKEOPTS="-j9"

              FEATURES=""
              ACCEPT_KEYWORDS="~mips"
              LINGUAS="en"

              USE="-pam -nls"

              PORTDIR="/usr/portage"
              PORTDIR_OVERLAY="/usr/portage"

              PYTHON_TARGETS="python3_3"
              PYTHON_SINGLE_TARGET="python3_3"

        %br
        %p
          Now mount and chroot
        
        = preserve do
          - code("shell") do
            :plain
              sudo wget "http://mirror.yandex.ru/gentoo-distfiles/snapshots/portage-latest.tar.bz2" -O /tmp/portage-latest.tar.bz2


              sudo tar xvjf /tmp/portage-latest.tar.bz2 -C ~/workspace/arm-hardfloat-linux-gnueabi/usr/
              
              sudo mount -t proc none ~/workspace/arm-hardfloat-linux-gnueabi/proc/
              sudo mount -o bind /sys ~/workspace/arm-hardfloat-linux-gnueabi/sys/
              sudo mount -o bind /dev ~/workspace/arm-hardfloat-linux-gnueabi/dev/
              sudo mount -o bind /dev/pts/ ~/workspace/arm-hardfloat-linux-gnueabi/dev/pts/
              sudo mount -o bind /dev/shm/ ~/workspace/arm-hardfloat-linux-gnueabi/dev/shm/
              sudo cp /etc/resolv.conf ~/workspace/arm-hardfloat-linux-gnueabi/etc/


              sudo tar xvjf /tmp/portage-latest.tar.bz2 -C ~/workspace/mips-unknown-linux-gnueabi/usr/

              sudo mount -t proc none ~/workspace/mips-unknown-linux-gnueabi/proc/
              sudo mount -o bind /sys ~/workspace/mips-unknown-linux-gnueabi/sys/
              sudo mount -o bind /dev ~/workspace/mips-unknown-linux-gnueabi/dev/
              sudo mount -o bind /dev/pts/ ~/workspace/mips-unknown-linux-gnueabi/dev/pts/
              sudo mount -o bind /dev/shm/ ~/workspace/mips-unknown-linux-gnueabi/dev/shm/
              sudo cp /etc/resolv.conf ~/workspace/mips-unknown-linux-gnueabi/etc/

              sudo chroot ~/workspace/arm-hardfloat-linux-gnueabi/ /bin/bash
              sudo chroot ~/workspace/mips-unknown-linux-gnueabi/  /bin/bash

        %p
          Build usual minimal software for arm and mips. This process will be slow (especially configure)
              
        = preserve do
          - code("shell") do
            :plain
              chmod a+w /tmp
              chmod a+w /var/tmp
              env-update
              ln -s /usr/portage/profiles/default/linux/arm/13.0 /etc/portage/make.profile
              
              rm /usr/portage/metadata/timestamp.chk
              emerge --sync

              echo '' > /var/lib/portage/world
              
              emerge -v1 diffutils
              
              mkdir -p /etc/portage/package.keywords/
              echo '=sys-apps/baselayout-prefix-2.2-r3 **' >> /etc/portage/package.keywords/sys-apps
              emerge -v1 baselayout-prefix
              source /etc/profile
              
              emerge -v1 gzip
              locale-gen
              
              emerge -v1 gawk
              emerge -v1 net-tools
              USE="-berkdb" emerge -v1 perl
              USE="internal-glib" emerge -v1 pkgconfig
        
        %p
          :markdown
            You can enable lto. Set the following lines to **/etc/portage/make.conf**

        = preserve do
          - code("shell") do
            :plain
              CFLAGS="-O2 -pipe -flto -fuse-linker-plugin"
              LDFLAGS="-flto -fuse-linker-plugin"

        %p
          Disable lto in several packages.

        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/env/
              echo 'CFLAGS="${CFLAGS} -fno-lto -fno-use-linker-plugin"
              CXXFLAGS="${CXXFLAGS} -fno-lto -fno-use-linker-plugin"
              LDFLAGS="${LDFLAGS} -fno-lto -fno-use-linker-plugin"' >> /etc/portage/env/no-lto.conf
              mkdir -p /etc/portage/package.env/

        %p
          Disable lto in several packages for arm.

        = preserve do
          - code("shell") do
            :plain
              echo 'dev-lang/perl no-lto.conf
              dev-lang/python no-lto.conf' >> /etc/portage/package.env/dev-lang
              echo 'net-misc/openssh no-lto.conf' >> /etc/portage/package.env/net-misc
              echo 'sys-apps/sysvinit no-lto.conf
              sys-apps/shadow no-lto.conf
              sys-apps/findutils no-lto.conf
              sys-apps/coreutils no-lto.conf
              sys-apps/gawk no-lto.conf
              sys-apps/sandbox no-lto.conf' >> /etc/portage/package.env/sys-apps
              echo 'sys-fs/e2fsprogs no-lto.conf' >> /etc/portage/package.env/sys-fs

        %p
          Disable lto in several packages for mips.

        = preserve do
          - code("shell") do
            :plain
              echo 'app-arch/bzip2 no-lto.conf' >> /etc/portage/package.env/app-arch
              echo 'dev-lang/perl no-lto.conf
              dev-lang/python no-lto.conf' >> /etc/portage/package.env/dev-lang
              echo 'dev-libs/elfutils no-lto.conf' >> /etc/portage/package.env/dev-libs
              echo 'net-misc/openssh no-lto.conf' >> /etc/portage/package.env/net-misc
              echo 'sys-apps/sysvinit no-lto.conf
              sys-apps/openrc no-lto.conf
              sys-apps/shadow no-lto.conf
              sys-apps/tcp-wrappers no-lto.conf
              sys-apps/findutils no-lto.conf
              sys-apps/coreutils no-lto.conf
              sys-apps/gawk no-lto.conf
              sys-apps/sandbox no-lto.conf' >> /etc/portage/package.env/sys-apps
              echo 'sys-fs/e2fsprogs no-lto.conf' >> /etc/portage/package.env/sys-fs
              echo 'sys-libs/ncurses no-lto.conf
              sys-libs/e2fsprogs-libs no-lto.conf
              sys-libs/readline no-lto.conf' >> /etc/portage/package.env/sys-libs

        %p
          Continue building minimal software.

        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/package.env/

              emerge -v1 gcc

              emerge -v1 pkgconfig
              emerge -v1 glibc
              emerge -v1 linux-headers
              emerge -v1 binutils

              emerge -C baselayout-prefix
              emerge -v1 openrc

              emerge -v1 perl
              emerge -v1 openssh

              echo 'sys-fs/udev' >> /etc/portage/package.mask/sys-fs
              emerge -v eudev

              emerge -vuDN --with-bdeps=y world

        %p
          These commands can be added for mips
        
        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/patches/sys-fs/eudev-1.5.2/
              sudo wget "https://www.puchuu.com/patches/sys-fs/eudev-1.5.2/fcntl.patch" -O /etc/portage/patches/sys-fs/eudev-1.5.2/fcntl.patch

        %p
          :markdown
            Now you need to rebuild all packages, that was builded before gcc. The simpliest way is to use **eix**.

        = preserve do
          - code("shell") do
            :plain
              emerge -v eix
              echo 'OVERLAY_CACHE_METHOD=parse' >> /etc/eixrc/00-eixrc
              eix-update

              emerge -v1 $(eix '-I*' --format '<installedversions:DATESORT>' | sort -n | cut -f3 | awk '{if (match($0, "^sys-devel/gcc(\\:4\\.8)?$")) exit(0); print $0}' | tr "\n" " ")

        %p
          :markdown
            If you have problems with [msgmerge](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=706237), you can simply remove it's binary, because you dont have **nls** use flag.

        = preserve do
          - code("shell") do
            :plain
              mv /usr/bin/msgmerge /usr/bin/msgmerge.bak

        %p
          You can make cleanup.

        = preserve do
          - code("shell") do
            :plain
              emerge -v gentoolkit
              emerge --depclean
              rm -rf /var/tmp/portage/*
              eclean --destructive distfiles

        %p
          :markdown
            Download [arm-hardfloat-linux-gnueabi](https://drive.google.com/file/d/0B11zLXPSukRzSUxZR21RZjg0ZVk/edit?usp=sharing)

        %p
          :markdown
            Download [mips-unknown-linux-gnueabi](https://drive.google.com/file/d/0B11zLXPSukRzQm9EV0JrdDd5RHM/edit?usp=sharing)

        %br
        %p Yay!
        = partial "partials/utils/picture", :locals => { :src => "photos/surprise.jpg" }
      
        %br
        %p Please feel free to comment this topic.
        #fb-root
        .fb-comments(data-href="https://www.puchuu.com/posts/arm-chroot.html" data-numposts="10" data-colorscheme="light")
