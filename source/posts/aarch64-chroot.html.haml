- content_for :title, "aarch64 chroot"
- content_for :description, "How to create full featured aarch64 chroot environment in gentoo."
- content_for :keywords, "aarch64, arm64, gcc, gdb, toolchain, stage3, qemu, cflags, chost"
- content_for :script do
  %script(type="text/javascript")
    :plain
      var disqus_shortname = "puchuu";
      var disqus_title = "aarch64 chroot";
- content_for :end_of_body do
  = javascript_include_tag "//puchuu.disqus.com/embed.js"

- content_for :content do
  %ul.content
    %li
      .label
        %h1
          How to create aarch64 chroot environment in gentoo
        %p.date
          15.05.14
      .topic
        %p
          There are some great news
        %ol
          %li
            :markdown
              [gcc 4.9](http://gcc.gnu.org/gcc-4.9/changes.html) have got many improvements for aarch64.
          %li
            :markdown
              [qemu 2.0](http://wiki.qemu.org/ChangeLog/2.0) have got support for aarch64 user-mode emulation.
        %p
          Lets create aarch64 chroot environment.

        %p
          :markdown
            Please install [layman](https://wiki.gentoo.org/wiki/Layman) first.
        %p
          :markdown
            Than add **toolchain** overlay with recent gcc.
        = preserve do
          - code("shell") do
            :plain
              sudo layman -a toolchain
              echo "*/*::toolchain" | sudo tee -a /etc/portage/package.mask/overlay

        %p
          Create local overlay to work with crossdev.
        = preserve do
          - code("shell") do
            :plain
              sudo mkdir -p /usr/local/portage/overlay/profiles/
              sudo mkdir -p /usr/local/portage/overlay/metadata/
              echo "local-overlay" | sudo tee -a /usr/local/portage/overlay/profiles/repo_name
              echo "masters = gentoo" | sudo tee -a /usr/local/portage/overlay/metadata/layout.conf

        %p
          Copy recent gcc ebuild to local overlay.
        = preserve do
          - code("shell") do
            :plain
              sudo mkdir -p /usr/local/portage/overlay/sys-devel/gcc/
              sudo cp /var/lib/layman/toolchain/sys-devel/gcc/gcc-4.9.0_alpha20140423.ebuild /usr/local/portage/overlay/sys-devel/gcc/gcc-4.9.0.ebuild
              sudo cp -R /var/lib/layman/toolchain/sys-devel/gcc/files/ /usr/local/portage/overlay/sys-devel/gcc/
              sudo ebuild /usr/local/portage/overlay/sys-devel/gcc/gcc-4.9.0.ebuild manifest

        %p
          :markdown
            Check **PORTDIR_OVERLAY** variable in **/etc/portage/make.conf**.
        = preserve do
          - code("shell") do
            :plain
              PORTDIR_OVERLAY="/usr/portage /usr/local/portage/overlay ${PORTDIR_OVERLAY}"

        %p
          :markdown
            There is a small problem in crossdev : [overlay search does not consider requested versions](https://bugs.gentoo.org/show_bug.cgi?id=508008)
            You can apply my patch, but it is very basic.
            Please reinstall crossdev after using this tutorial.
        = preserve do
          - code("shell") do
            :plain
              sudo emerge -v sys-devel/crossdev
              wget "https://www.puchuu.com/patches/sys-devel/crossdev/overlay_search.patch" -O /tmp/overlay_search.patch
              sudo patch /usr/bin/crossdev /tmp/overlay_search.patch

        %p
          Now you can create usual crossdev environment for aarch64
        = preserve do
          - code("shell") do
            :plain
              sudo crossdev -t aarch64-unknown-linux-gnueabi --g 4.9.0 --l 2.19 --k 3.14 --b 9999
              
              sudo rmdir /usr/aarch64-unknown-linux-gnueabi/usr/lib/
              sudo ln -s /usr/aarch64-unknown-linux-gnueabi/usr/lib64/ /usr/aarch64-unknown-linux-gnueabi/usr/lib
              
              sudo rm /usr/aarch64-unknown-linux-gnueabi/etc/portage/make.profile
              sudo ln -s /usr/portage/profiles/default/linux/arm64/13.0/ /usr/aarch64-unknown-linux-gnueabi/etc/portage/make.profile
        
        %p
          :markdown
            Set the following configuration lines to **/usr/aarch64-unknown-linux-gnueabi/etc/portage/make.conf**
        = preserve do
          - code("shell") do
            :plain
              USE="${ARCH} minimal -pam -nls"
              CFLAGS="-O2 -pipe"
              MAKEOPTS="-j9"
              FEATURES="-collision-protect -protect-owned sandbox noman nodoc noinfo"
              PYTHON_TARGETS="python3_4"
              PYTHON_SINGLE_TARGET="python3_4"
              PORTDIR_OVERLAY="/usr/portage /usr/local/portage/overlay"
              
        %p
          Than you need to build minimal toolchain
        = preserve do
          - code("shell") do
            :plain
              sudo mkdir -p /usr/aarch64-unknown-linux-gnueabi/etc/portage/package.keywords
              echo "=sys-devel/binutils-9999 **
              =sys-devel/gcc-4.9.0 **" | sudo tee -a /usr/aarch64-unknown-linux-gnueabi/etc/portage/package.keywords/sys-devel
              
              sudo mkdir -p /usr/aarch64-unknown-linux-gnueabi/etc/portage/env/dev-lang
              echo 'export ac_cv_file__dev_ptmx=no' | sudo tee -a /usr/aarch64-unknown-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null
              echo 'export ac_cv_file__dev_ptc=no' | sudo tee -a /usr/aarch64-unknown-linux-gnueabi/etc/portage/env/dev-lang/python > /dev/null
              
              sudo aarch64-unknown-linux-gnueabi-emerge -v1 sys-kernel/linux-headers sys-devel/binutils bash portage findutils wget app-arch/tar sys-devel/make grep patch gawk
              
              sudo mkdir -p /usr/aarch64-unknown-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.9.0
              sudo wget "https://www.puchuu.com/patches/sys-devel/gcc-4.8.2-r1/target_header_dir.patch" -O /usr/aarch64-unknown-linux-gnueabi/etc/portage/patches/sys-devel/gcc-4.9.0/target_header_dir.patch
              
              sudo aarch64-unknown-linux-gnueabi-emerge -v1 sys-devel/gcc
              
        %p
          You can copy toolchain to your workspace now and start prepairing chroot
        = preserve do
          - code("shell") do
            :plain
              mkdir -p ~/workspace
              sudo cp -R /usr/aarch64-unknown-linux-gnueabi ~/workspace/
              
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/usr/local/portage/
              sudo cp -R /usr/local/portage/overlay/ ~/workspace/aarch64-unknown-linux-gnueabi/usr/local/portage/
              
              sudo mkdir -p /etc/portage/env/
              echo 'QEMU_USER_TARGETS="aarch64"' | sudo tee /etc/portage/env/qemu.conf > /dev/null

              sudo mkdir -p /etc/portage/package.env/
              echo 'app-emulation/qemu-user qemu.conf' | sudo tee -a /etc/portage/package.env/app-emulation > /dev/null
              
              sudo mkdir -p /etc/portage/patches/app-emulation/qemu-user-9999/
              sudo wget "https://www.puchuu.com/patches/app-emulation/qemu-user-9999/binfmt-wrapper.patch" -O /etc/portage/patches/app-emulation/qemu-user-9999/binfmt-wrapper.patch
              
              sudo wget "https://www.puchuu.com/patches/app-emulation/qemu-user-9999/aarch64_initd.patch" -O /tmp/aarch64_initd.patch
              sudo patch /usr/portage/app-emulation/qemu-user/files/qemu-binfmt.initd /tmp/aarch64_initd.patch
              
              sudo wget "https://www.puchuu.com/patches/app-emulation/qemu-user-9999/aarch64_ebuild.patch" -O /tmp/aarch64_ebuild.patch
              sudo patch /usr/portage/app-emulation/qemu-user/qemu-user-9999.ebuild /tmp/aarch64_ebuild.patch
              sudo ebuild /usr/portage/app-emulation/qemu-user/qemu-user-9999.ebuild manifest
              
              sudo mkdir -p /etc/portage/package.unmask/
              echo "=app-emulation/qemu-user-9999" | sudo tee -a /etc/portage/package.unmask/app-emulation
              sudo mkdir -p /etc/portage/package.keywords/
              echo "=app-emulation/qemu-user-9999 **" | sudo tee -a /etc/portage/package.keywords/app-emulation
              
              sudo emerge -v qemu-user
              sudo rc-service qemu-binfmt start
              
              sudo cp /usr/bin/qemu-static-aarch64        ~/workspace/aarch64-unknown-linux-gnueabi/usr/bin/
              sudo cp /usr/bin/qemu-static-aarch64-binfmt ~/workspace/aarch64-unknown-linux-gnueabi/usr/bin/
              
              sudo wget "http://mirror.yandex.ru/gentoo-distfiles/snapshots/portage-latest.tar.bz2" -O /tmp/portage-latest.tar.bz2
              sudo tar xvjf /tmp/portage-latest.tar.bz2 -C ~/workspace/aarch64-unknown-linux-gnueabi/usr/
        
        %p
          Clean chroot environment
        
        = preserve do
          - code("shell") do
            :plain
              sudo rm -r ~/workspace/aarch64-unknown-linux-gnueabi/tmp/portage/*
              sudo rm ~/workspace/aarch64-unknown-linux-gnueabi/etc/portage/make.profile
              sudo rm -r ~/workspace/aarch64-unknown-linux-gnueabi/etc/portage/env
              sudo rm -r ~/workspace/aarch64-unknown-linux-gnueabi/etc/portage/patches
              
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/proc
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/dev
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/sys
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/root
              sudo mkdir -p ~/workspace/aarch64-unknown-linux-gnueabi/usr/portage/
              
              echo 'root:x:0:0:root:/root:/bin/bash
              portage:x:250:250:portage:/var/tmp/portage:/bin/false' | sudo tee -a ~/workspace/aarch64-unknown-linux-gnueabi/etc/passwd > /dev/null
              echo 'root:x:0:root
              portage::250:portage' | sudo tee -a ~/workspace/aarch64-unknown-linux-gnueabi/etc/group > /dev/null
              
              echo 'LANG="en_US.UTF-8"
              LC_COLLATE="C"' | sudo tee -a ~/workspace/aarch64-unknown-linux-gnueabi/etc/env.d/02locale > /dev/null
              
              echo 'en_US.UTF-8 UTF-8' | sudo tee -a ~/workspace/aarch64-unknown-linux-gnueabi/etc/locale.gen > /dev/null
              
        %p
          :markdown
            Set **~/workspace/aarch64-unknown-linux-gnueabi/etc/portage/make.conf** to something like
        = preserve do
          - code("shell") do
            :plain
              SYNC="rsync://mirror.yandex.ru/gentoo-portage/"
              GENTOO_MIRRORS="http://mirror.yandex.ru/gentoo-distfiles/"

              CHOST="aarch64-unknown-linux-gnueabi"
              CFLAGS="-O2 -pipe"
              CXXFLAGS="${CFLAGS}"
              MAKEOPTS="-j9"

              FEATURES=""
              ACCEPT_KEYWORDS="~arm64"
              LINGUAS="en"

              USE="-pam -nls"

              PORTDIR="/usr/portage"
              PORTDIR_OVERLAY="/usr/portage /usr/local/portage/overlay ${PORTDIR_OVERLAY}"

              PYTHON_TARGETS="python3_4 python2_7"
              PYTHON_SINGLE_TARGET="python3_4 python2_7"
        
        %p
          Now mount and chroot
        = preserve do
          - code("shell") do
            :plain
              sudo mount -t proc none ~/workspace/aarch64-unknown-linux-gnueabi/proc/
              sudo mount -o bind /sys ~/workspace/aarch64-unknown-linux-gnueabi/sys/
              sudo mount -o bind /dev ~/workspace/aarch64-unknown-linux-gnueabi/dev/
              sudo mount -o bind /dev/pts/ ~/workspace/aarch64-unknown-linux-gnueabi/dev/pts/
              sudo mount -o bind /dev/shm/ ~/workspace/aarch64-unknown-linux-gnueabi/dev/shm/
              sudo cp /etc/resolv.conf ~/workspace/aarch64-unknown-linux-gnueabi/etc/
              
              sudo chroot ~/workspace/aarch64-unknown-linux-gnueabi/ /bin/bash
        
        %p
          Build usual minimal software for arm and mips. This process will be slow (especially configure)
        = preserve do
          - code("shell") do
            :plain
              chmod a+w /tmp
              chmod a+w /var/tmp
              
              rm /usr/lib
              ln -s /usr/lib64/ /usr/lib
              env-update
              ln -s /usr/portage/profiles/default/linux/arm64/13.0 /etc/portage/make.profile

              rm /usr/portage/metadata/timestamp.chk
              emerge --sync

              echo '' > /var/lib/portage/world

              emerge -v1 diffutils

              mkdir -p /etc/portage/package.keywords/
              echo '=sys-apps/baselayout-prefix-2.2-r3 **' >> /etc/portage/package.keywords/sys-apps
              emerge -v1 baselayout-prefix
              source /etc/profile

              emerge -v1 gzip
              locale-gen

              emerge -v1 gawk
              emerge -v1 net-tools
              USE="-berkdb" emerge -v1 perl
              USE="internal-glib" emerge -v1 pkgconfig

        %p
          :markdown
            You can enable lto. Set the following lines to **/etc/portage/make.conf**
        = preserve do
          - code("shell") do
            :plain
              CFLAGS="-O2 -pipe -flto -fuse-linker-plugin"
              LDFLAGS="-flto -fuse-linker-plugin"
        
        %p
          Disable lto in several packages
        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/env/
              echo 'CFLAGS="${CFLAGS} -fno-lto -fno-use-linker-plugin"
              CXXFLAGS="${CXXFLAGS} -fno-lto -fno-use-linker-plugin"
              LDFLAGS="${LDFLAGS} -fno-lto -fno-use-linker-plugin"' >> /etc/portage/env/no-lto.conf

        %p
          Disable lto in several packages
        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/package.env/
              
              echo '=app-arch/cpio-2.11-r1 no-lto.conf
              =app-arch/tar-1.27.1-r2 no-lto.conf
              =app-arch/gzip-1.6 no-lto.conf' >> /etc/portage/package.env/app-arch
                
              echo '=app-shells/bash-4.2_p47 no-lto.conf' >> /etc/portage/package.env/app-shells
                
              echo '=dev-lang/perl-5.18.2 no-lto.conf
              =dev-lang/python-2.7.6-r1 no-lto.conf
              =dev-lang/python-3.4.0 no-lto.conf' >> /etc/portage/package.env/dev-lang
                
              echo '=dev-libs/elfutils-0.158 no-lto.conf
              =dev-libs/libpipeline-1.3.0 no-lto.conf' >> /etc/portage/package.env/dev-libs
                
              echo '=dev-util/gperf-3.0.4 no-lto.conf' >> /etc/portage/package.env/dev-util
                
              echo '=dev-vcs/git-1.9.3 no-lto.conf' >> /etc/portage/package.env/dev-vcs
                
              echo '=net-misc/openssh-6.6.1_p1 no-lto.conf
              =net-misc/wget-1.15 no-lto.conf' >> /etc/portage/package.env/net-misc
                
              echo '=sys-apps/util-linux-2.24.1-r3 no-lto.conf
              =sys-apps/texinfo-5.2 no-lto.conf
              =sys-apps/groff-1.22.2 no-lto.conf
              =sys-apps/shadow-4.1.5.1-r1 no-lto.conf
              =sys-apps/which-2.20-r1 no-lto.conf
              =sys-apps/busybox-1.22.1 no-lto.conf
              =sys-apps/kmod-17 no-lto.conf
              =sys-apps/kbd-2.0.1-r1 no-lto.conf
              =sys-apps/findutils-4.5.12 no-lto.conf
              =sys-apps/attr-2.4.47-r1 no-lto.conf
              =sys-apps/diffutils-3.3 no-lto.conf
              =sys-apps/acl-2.2.52-r1 no-lto.conf
              =sys-apps/net-tools-1.60_p20130513023548 no-lto.conf
              =sys-apps/coreutils-8.22-r1 no-lto.conf
              =sys-apps/sed-4.2.2 no-lto.conf
              =sys-apps/sandbox-2.6-r1 no-lto.conf
              =sys-apps/grep-2.18 no-lto.conf' >> /etc/portage/package.env/sys-apps
                
              echo '=sys-devel/m4-1.4.17 no-lto.conf
              =sys-devel/bison-3.0.2 no-lto.conf
              =sys-devel/gettext-0.18.3.2 no-lto.conf
              =sys-devel/patch-2.7.1-r3 no-lto.conf' >> /etc/portage/package.env/sys-devel
                
              echo '=sys-fs/eudev-1.6 no-lto.conf
              =sys-fs/e2fsprogs-1.42.9 no-lto.conf' >> /etc/portage/package.env/sys-fs
                
              echo '=sys-libs/ncurses-5.9-r3 no-lto.conf
              =sys-libs/zlib-1.2.8-r1 no-lto.conf
              =sys-libs/gdbm-1.11 no-lto.conf' >> /etc/portage/package.env/sys-libs
        
        %p
          Unmask several packages
        
        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/package.keywords/
              
              echo 'app-admin/eselect-package-manager **' >> /etc/portage/package.keywords/app-admin
              echo 'app-portage/eix **
              app-portage/smart-live-rebuild **
              app-portage/gentoopm **' >> /etc/portage/package.keywords/app-portage
              echo 'app-shells/push **' >> /etc/portage/package.keywords/app-shells
              echo 'dev-util/gperf **' >> /etc/portage/package.keywords/dev-util
              echo 'dev-vcs/git **' >> /etc/portage/package.keywords/dev-vcs
              echo 'sys-apps/baselayout-prefix **
              sys-apps/busybox **' >> /etc/portage/package.keywords/sys-apps
              echo 'sys-devel/binutils **
              sys-devel/gcc **' >> /etc/portage/package.keywords/sys-devel
              echo 'sys-fs/eudev **' >> /etc/portage/package.keywords/sys-fs
              
              
              mkdir -p /etc/portage/package.mask/
              
              echo '>=app-portage/smart-live-rebuild-9999
              >=app-portage/gentoopm-9999' >> /etc/portage/package.mask/app-portage
              echo '>=dev-vcs/git-9999' >> /etc/portage/package.mask/dev-vcs
              echo '>=sys-apps/busybox-9999' >> /etc/portage/package.mask/sys-apps
              echo 'sys-fs/udev
              >=sys-fs/eudev-9999' >> /etc/portage/package.mask/sys-fs
        
        %p
          :markdown
            You should disable **threads** for git, because it fails to run in qemu
        
        = preserve do
          - code("shell") do
            :plain
              mkdir -p /etc/portage/package.use/
              echo 'dev-vcs/git -threads' >> /etc/portage/package.use/dev-vcs
        
        %p
          Continue building minimal software
        
        = preserve do
          - code("shell") do
            :plain
              emerge -v1 gcc

              emerge -v1 pkgconfig
              emerge -v1 glibc
              emerge -v1 linux-headers

              emerge -v1 groff
              emerge -v1 git
              
              emerge -v1 binutils
              
              emerge -C baselayout-prefix
              emerge -v1 baselayout
              
              rm /usr/lib
              ln -s /usr/lib64/ /usr/lib
              source /etc/profile
              env-update
              
              emerge -v1 openrc
              emerge -v1 perl
              emerge -v1 openssh
              emerge -v eudev
              
              emerge -v smart-live-rebuild

              emerge -vuDN --with-bdeps=y world
        
        %p
          :markdown
            Now you need to rebuild all packages, that was builded before gcc. The simpliest way is to use **eix**

        = preserve do
          - code("shell") do
            :plain
              emerge -v eix
              echo 'OVERLAY_CACHE_METHOD=parse' >> /etc/eixrc/00-eixrc
              eix-update

              emerge -v1 $(eix '-I*' --format '<installedversions:DATESORT>' | sort -n | cut -f3 | awk '{if (match($0, "^sys-devel/gcc(\\:4\\.9)?$")) exit(0); print $0}' | tr "\n" " ")

        %p
          You can make cleanup.

        = preserve do
          - code("shell") do
            :plain
              emerge -v gentoolkit
              emerge --depclean
              rm -rf /var/tmp/portage/*
              eclean --destructive distfiles
        
        %p
          :markdown
            Download [aarch64-unknown-linux-gnueabi](https://drive.google.com/file/d/0B11zLXPSukRza1hlRnFpNTE2WGc/edit?usp=sharing)
        
        #disqus_thread
